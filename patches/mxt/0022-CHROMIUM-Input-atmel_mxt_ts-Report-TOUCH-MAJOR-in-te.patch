From 39de49532c5c9f32cec54261bfc33a83288f9949 Mon Sep 17 00:00:00 2001
From: Yufeng Shen <miletus@chromium.org>
Date: Fri, 25 May 2012 13:55:26 -0400
Subject: [PATCH 22/57] CHROMIUM: Input: atmel_mxt_ts - Report TOUCH MAJOR in
 terms of pixels

The TCHAREA field reported from the device is in terms of channels
covered by the touch, while ABS_MT_TOUCH_MAJOR is expected to be in
the units the same as the configured device resolution. So we
approximate the touch contact as a circle, convert the touch area
from channel numbers to pixel numbers, and compute the diameter of
the circle touch as the value of ABS_MT_TOUCH_MAJOR.

Signed-off-by: Yufeng Shen <miletus@chromium.org>
Signed-off-by: Daniel Kurtz <djkurtz@chromium.org>

BUG=chrome-os-partner:9968
TEST=using evtest to check the range of ABS_MT_TOUCH_MAJOR is now
     somewhat between 50 ~ 100, instead of 1 ~ 10 while making
     normal touching.

Change-Id: I9972a4989a18b9fbe4fdf1edd70330a4e9df3f85
Reviewed-on: https://gerrit.chromium.org/gerrit/24530
Commit-Ready: Yufeng Shen <miletus@chromium.org>
Reviewed-by: Yufeng Shen <miletus@chromium.org>
Tested-by: Yufeng Shen <miletus@chromium.org>

v3.7 rebase:
Signed-off-by: Daniel Kurtz <djkurtz@chromium.org>
---
 drivers/input/touchscreen/atmel_mxt_ts.c | 40 ++++++++++++++++++++++++++++++--
 1 file changed, 38 insertions(+), 2 deletions(-)

diff --git a/drivers/input/touchscreen/atmel_mxt_ts.c b/drivers/input/touchscreen/atmel_mxt_ts.c
index 95abf18..66b6f70 100644
--- a/drivers/input/touchscreen/atmel_mxt_ts.c
+++ b/drivers/input/touchscreen/atmel_mxt_ts.c
@@ -273,6 +273,10 @@ struct mxt_data {
 	unsigned int max_x;
 	unsigned int max_y;
 
+	/* max touchscreen area in terms of pixels and channels */
+	unsigned int max_area_pixels;
+	unsigned int max_area_channels;
+
 	u32 info_csum;
 	u32 config_csum;
 
@@ -639,6 +643,23 @@ static void mxt_input_button(struct mxt_data *data, struct mxt_message *message)
 	dev_dbg(dev, "Button state: %d\n", button);
 }
 
+/*
+ * Assume a circle touch contact and use the diameter as the touch major.
+ * touch_pixels = touch_channels * (max_area_pixels / max_area_channels)
+ * touch_pixels = pi * (touch_major / 2) ^ 2;
+ */
+static int get_touch_major_pixels(struct mxt_data *data, int touch_channels)
+{
+	int touch_pixels;
+
+	if (data->max_area_channels == 0)
+		return 0;
+
+	touch_pixels = DIV_ROUND_CLOSEST(touch_channels * data->max_area_pixels,
+					 data->max_area_channels);
+	return int_sqrt(DIV_ROUND_CLOSEST(touch_pixels * 100, 314)) * 2;
+}
+
 static void mxt_input_touchevent(struct mxt_data *data,
 				      struct mxt_message *message, int id)
 {
@@ -649,6 +670,7 @@ static void mxt_input_touchevent(struct mxt_data *data,
 	int y;
 	int area;
 	int pressure;
+	int touch_major;
 
 	x = (message->message[1] << 4) | ((message->message[3] >> 4) & 0xf);
 	y = (message->message[2] << 4) | ((message->message[3] & 0xf));
@@ -658,6 +680,7 @@ static void mxt_input_touchevent(struct mxt_data *data,
 		y = y >> 2;
 
 	area = message->message[4];
+	touch_major = get_touch_major_pixels(data, area);
 	pressure = message->message[5];
 
 	dev_dbg(dev,
@@ -681,7 +704,7 @@ static void mxt_input_touchevent(struct mxt_data *data,
 		input_report_abs(input_dev, ABS_MT_POSITION_X, x);
 		input_report_abs(input_dev, ABS_MT_POSITION_Y, y);
 		input_report_abs(input_dev, ABS_MT_PRESSURE, pressure);
-		input_report_abs(input_dev, ABS_MT_TOUCH_MAJOR, area);
+		input_report_abs(input_dev, ABS_MT_TOUCH_MAJOR, touch_major);
 	}
 }
 
@@ -1183,6 +1206,7 @@ static int mxt_calc_resolution(struct mxt_data *data)
 	u8 orient;
 	__le16 xyrange[2];
 	unsigned int max_x, max_y;
+	u8 xylines[2];
 	int ret;
 
 	struct mxt_object *T9 = mxt_get_object(data, MXT_TOUCH_MULTI_T9);
@@ -1200,6 +1224,11 @@ static int mxt_calc_resolution(struct mxt_data *data)
 	if (ret)
 		return ret;
 
+	ret = __mxt_read_reg(client, T9->start_address + MXT_TOUCH_XSIZE,
+			2, xylines);
+	if (ret)
+		return ret;
+
 	max_x = le16_to_cpu(xyrange[0]);
 	max_y = le16_to_cpu(xyrange[1]);
 
@@ -1211,6 +1240,9 @@ static int mxt_calc_resolution(struct mxt_data *data)
 		data->max_y = max_y;
 	}
 
+	data->max_area_pixels = max_x * max_y;
+	data->max_area_channels = xylines[0] * xylines[1];
+
 	return 0;
 }
 
@@ -1722,6 +1754,8 @@ static int mxt_input_dev_create(struct mxt_data *data)
 	struct input_dev *input_dev;
 	int error;
 	unsigned int num_mt_slots;
+	int max_area_channels;
+	int max_touch_major;
 
 	data->input_dev = input_dev = input_allocate_device();
 	if (!input_dev)
@@ -1767,8 +1801,10 @@ static int mxt_input_dev_create(struct mxt_data *data)
 	if (error)
 		goto err_free_device;
 
+	max_area_channels = min(255U, data->max_area_channels);
+	max_touch_major = get_touch_major_pixels(data, max_area_channels);
 	input_set_abs_params(input_dev, ABS_MT_TOUCH_MAJOR,
-			     0, MXT_MAX_AREA, 0, 0);
+			     0, max_touch_major, 0, 0);
 	input_set_abs_params(input_dev, ABS_MT_POSITION_X,
 			     0, data->max_x, 0, 0);
 	input_set_abs_params(input_dev, ABS_MT_POSITION_Y,
-- 
1.8.1.4

