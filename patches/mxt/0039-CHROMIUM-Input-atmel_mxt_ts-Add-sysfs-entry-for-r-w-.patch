From 2f96909fa827ddd018b5b3982718cbc0f1726796 Mon Sep 17 00:00:00 2001
From: Yufeng Shen <miletus@chromium.org>
Date: Wed, 16 May 2012 18:38:14 -0400
Subject: [PATCH 39/57] CHROMIUM: Input: atmel_mxt_ts - Add sysfs entry for r/w
 config file name

In the preparation for adding support of loading atmel config data
from file, this CL adds the sysfs entry config_file so that which
config file to be used is configurable from userspace. The config
file under /lib/firmware/ will be loaded through request_firmware()
call. The default config file is "maxtouch.cfg".

This support is necessary on system with more than 1 atmel chip and
each needs a different configuration file.

Signed-off-by: Yufeng Shen <miletus@chromium.org>

BUG=chrome-os-partner:9103
TEST=cat path-to-atmel-sysfs/config_file
     and make sure "maxtouch.cfg" is returned
     echo XXX > path-to-atmel-sysfs/config_file
     cat path-to-atmel-sysfs/config_file
     and make sure XXX is returned

Change-Id: If87a4956c46b4a27e40f689be6304691b79cbf00
Reviewed-on: https://gerrit.chromium.org/gerrit/21663
Reviewed-by: Benson Leung <bleung@chromium.org>
Commit-Ready: Yufeng Shen <miletus@chromium.org>
Tested-by: Yufeng Shen <miletus@chromium.org>

v3.7 rebase:
Signed-off-by: Daniel Kurtz <djkurtz@chromium.org>
---
 drivers/input/touchscreen/atmel_mxt_ts.c | 37 +++++++++++++++++++++++++++++++-
 1 file changed, 36 insertions(+), 1 deletion(-)

diff --git a/drivers/input/touchscreen/atmel_mxt_ts.c b/drivers/input/touchscreen/atmel_mxt_ts.c
index 1659d91..dbabc89 100644
--- a/drivers/input/touchscreen/atmel_mxt_ts.c
+++ b/drivers/input/touchscreen/atmel_mxt_ts.c
@@ -42,6 +42,9 @@
 /* Firmware */
 #define MXT_FW_NAME		"maxtouch.fw"
 
+/* Config file */
+#define MXT_CONFIG_NAME		"maxtouch.cfg"
+
 /* Registers */
 #define MXT_INFO		0x00
 #define MXT_FAMILY_ID		0x00
@@ -331,6 +334,9 @@ struct mxt_data {
 
 	/* firmware file name */
 	char *fw_file;
+
+	/* config file name */
+	char *config_file;
 };
 
 /* global root node of the atmel_mxt_ts debugfs directory. */
@@ -1542,6 +1548,24 @@ static ssize_t mxt_config_csum_show(struct device *dev,
 	return scnprintf(buf, PAGE_SIZE, "%06x\n", data->config_csum);
 }
 
+static ssize_t mxt_config_file_show(struct device *dev,
+				    struct device_attribute *attr, char *buf)
+{
+	struct mxt_data *data = dev_get_drvdata(dev);
+	return scnprintf(buf, PAGE_SIZE, "%s\n", data->config_file);
+}
+
+static ssize_t mxt_config_file_store(struct device *dev,
+				     struct device_attribute *attr,
+				     const char *buf, size_t count)
+{
+	struct mxt_data *data = dev_get_drvdata(dev);
+	int ret;
+
+	ret = mxt_update_file_name(dev, &data->config_file, buf, count);
+	return ret ? ret : count;
+}
+
 static ssize_t mxt_fw_file_show(struct device *dev,
 				struct device_attribute *attr, char *buf)
 {
@@ -1714,6 +1738,8 @@ static ssize_t mxt_update_fw_store(struct device *dev,
 static DEVICE_ATTR(backupnv, S_IWUSR, NULL, mxt_backupnv_store);
 static DEVICE_ATTR(calibrate, S_IWUSR, NULL, mxt_calibrate_store);
 static DEVICE_ATTR(config_csum, S_IRUGO, mxt_config_csum_show, NULL);
+static DEVICE_ATTR(config_file, S_IRUGO | S_IWUSR, mxt_config_file_show,
+		   mxt_config_file_store);
 static DEVICE_ATTR(fw_file, S_IRUGO | S_IWUSR, mxt_fw_file_show,
 		   mxt_fw_file_store);
 static DEVICE_ATTR(fw_version, S_IRUGO, mxt_fw_version_show, NULL);
@@ -1727,6 +1753,7 @@ static struct attribute *mxt_attrs[] = {
 	&dev_attr_backupnv.attr,
 	&dev_attr_calibrate.attr,
 	&dev_attr_config_csum.attr,
+	&dev_attr_config_file.attr,
 	&dev_attr_fw_file.attr,
 	&dev_attr_fw_version.attr,
 	&dev_attr_hw_version.attr,
@@ -2239,12 +2266,17 @@ static int __devinit mxt_probe(struct i2c_client *client,
 	if (error)
 		goto err_free_mem;
 
+	error = mxt_update_file_name(&client->dev, &data->config_file,
+				     MXT_CONFIG_NAME, strlen(MXT_CONFIG_NAME));
+	if (error)
+		goto err_free_fw_file;
+
 	if (mxt_in_bootloader(data)) {
 		dev_info(&client->dev, "Device in bootloader at probe\n");
 	} else {
 		error = mxt_initialize(data);
 		if (error)
-			goto err_free_fw_file;
+			goto err_free_cfg_file;
 
 		error = mxt_input_dev_create(data);
 		if (error)
@@ -2286,6 +2318,8 @@ err_unregister_device:
 	input_unregister_device(data->input_dev);
 err_free_object:
 	kfree(data->object_table);
+err_free_cfg_file:
+	kfree(data->config_file);
 err_free_fw_file:
 	kfree(data->fw_file);
 err_free_mem:
@@ -2304,6 +2338,7 @@ static int mxt_remove(struct i2c_client *client)
 		input_unregister_device(data->input_dev);
 	kfree(data->object_table);
 	kfree(data->fw_file);
+	kfree(data->config_file);
 	kfree(data);
 
 	return 0;
-- 
1.8.1.4

