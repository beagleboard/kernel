From bd36d2ff4e167351731d641d38ce18833dfc94fb Mon Sep 17 00:00:00 2001
From: Benson Leung <bleung@chromium.org>
Date: Mon, 13 Aug 2012 18:10:29 -0700
Subject: [PATCH 45/57] CHROMIUM: Input: atmel_mxt_ts - Suppress handle
 messages used for resume

The position information at resume time while the system is in a
low power state may be garbage, so do not actually report this
information up to the input layer. Just perform the reads to clear
out the status on the device side.

Signed-off-by: Benson Leung <bleung@chromium.org>

BUG=chrome-os-partner:12318
TEST=Suspend/resume using lid close. Check that on resume,
the touch device doesn't show a bunch of garbage data
from when the lid was just being opened.

Change-Id: I4e60ab672d6191b9141e08e9b0bfdbf42649a95e
Reviewed-on: https://gerrit.chromium.org/gerrit/31194
Reviewed-by: Yufeng Shen <miletus@chromium.org>

v3.7 rebase:
Signed-off-by: Daniel Kurtz <djkurtz@chromium.org>
---
 drivers/input/touchscreen/atmel_mxt_ts.c | 18 ++++++++++--------
 1 file changed, 10 insertions(+), 8 deletions(-)

diff --git a/drivers/input/touchscreen/atmel_mxt_ts.c b/drivers/input/touchscreen/atmel_mxt_ts.c
index 33b564b..af92d8d 100644
--- a/drivers/input/touchscreen/atmel_mxt_ts.c
+++ b/drivers/input/touchscreen/atmel_mxt_ts.c
@@ -837,7 +837,7 @@ static bool mxt_is_T9_message(struct mxt_data *data, struct mxt_message *msg)
 	return (id >= data->T9_reportid_min && id <= data->T9_reportid_max);
 }
 
-static int mxt_proc_messages(struct mxt_data *data, u8 count)
+static int mxt_proc_messages(struct mxt_data *data, u8 count, bool report)
 {
 	struct device *dev = &data->client->dev;
 	u8 reportid;
@@ -854,6 +854,8 @@ static int mxt_proc_messages(struct mxt_data *data, u8 count)
 		dev_err(dev, "Failed to read %u messages (%d).\n", count, ret);
 		goto out;
 	}
+	if (!report)
+		goto out;
 
 	for (msg = messages; msg < &messages[count]; msg++) {
 		mxt_dump_message(dev, msg);
@@ -887,7 +889,7 @@ out:
 	return ret;
 }
 
-static int mxt_handle_messages(struct mxt_data *data)
+static int mxt_handle_messages(struct mxt_data *data, bool report)
 {
 	struct device *dev = &data->client->dev;
 	int ret;
@@ -900,7 +902,7 @@ static int mxt_handle_messages(struct mxt_data *data)
 	}
 
 	if (count > 0)
-		ret = mxt_proc_messages(data, count);
+		ret = mxt_proc_messages(data, count, report);
 
 	return ret;
 }
@@ -985,7 +987,7 @@ static void mxt_exit_bl(struct mxt_data *data)
 		return;
 	}
 
-	error = mxt_handle_messages(data);
+	error = mxt_handle_messages(data, false);
 	if (error)
 		dev_err(dev, "Failed to clear CHG after init. error = %d\n",
 			error);
@@ -1000,7 +1002,7 @@ static irqreturn_t mxt_interrupt(int irq, void *dev_id)
 		/* bootloader state transition completion */
 		complete(&data->bl_completion);
 	} else {
-		mxt_handle_messages(data);
+		mxt_handle_messages(data, true);
 	}
 	return IRQ_HANDLED;
 }
@@ -1646,7 +1648,7 @@ register_input_dev:
 	}
 
 	/* Clear message buffer */
-	ret2 = mxt_handle_messages(data);
+	ret2 = mxt_handle_messages(data, true);
 	if (ret2) {
 		dev_err(dev, "Error clearing msg buffer (%d)\n", ret2);
 		ret = ret2;
@@ -2598,7 +2600,7 @@ static void mxt_initialize_async(void *closure, async_cookie_t cookie)
 	}
 
 	if (!mxt_in_bootloader(data)) {
-		error = mxt_handle_messages(data);
+		error = mxt_handle_messages(data, true);
 		if (error)
 			goto error_free_irq;
 	}
@@ -2800,7 +2802,7 @@ static int mxt_resume(struct device *dev)
 		return 0;
 
 	/* Process any pending message so that CHG line can be de-asserted */
-	ret = mxt_handle_messages(data);
+	ret = mxt_handle_messages(data, false);
 	if (ret)
 		dev_err(dev, "Handling message fails upon resume, %d\n", ret);
 
-- 
1.8.1.4

