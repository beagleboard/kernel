From 566d85fea2037c0726c055d22d5a0160cd69df5f Mon Sep 17 00:00:00 2001
From: Matt Ranostay <mranostay@gmail.com>
Date: Thu, 17 Jan 2013 16:02:48 -0800
Subject: [PATCH 2/8] ARM: omap: add DT support for deasserting hardware reset
 lines

 This optional binding extension allows specification of a hwmod
 and associate hardware reset line which should be deasserted for
 the device to be functional.

 The implementation works for reference as to the problem that
 exists for utilizing uio_pruss on AM33xx but is suboptimal. The
 problem is that this deassertion occurs before clocks are enabled
 and we are warned that the hard reset failed. Ideally the list of
 rst lines requested to be deasserted would be cached and used within
 the hwmod enable sequencing (instead of it just returning if any
 hardware reset line is asserted).

 Signed-off-by: Matt Porter <mporter@ti.com>
 Signed-off-by: Matt Ranostay <mranostay@gmail.com>
---
 .../devicetree/bindings/arm/omap/omap.txt          |  2 ++
 arch/arm/mach-omap2/omap_device.c                  | 25 ++++++++++++++++++++--
 drivers/uio/uio_pruss.c                            |  2 +-
 3 files changed, 26 insertions(+), 3 deletions(-)

diff --git a/Documentation/devicetree/bindings/arm/omap/omap.txt b/Documentation/devicetree/bindings/arm/omap/omap.txt
index d0051a7..3133a4b 100644
--- a/Documentation/devicetree/bindings/arm/omap/omap.txt
+++ b/Documentation/devicetree/bindings/arm/omap/omap.txt
@@ -21,6 +21,8 @@ Required properties:
 Optional properties:
 - ti,no_idle_on_suspend: When present, it prevents the PM to idle the module
   during suspend.
+- ti,deassert-hard-reset: list of hwmod and hardware reset line name pairs
+  (ascii strings) to be deasserted upon device instantiation.
 
 
 Example:
diff --git a/arch/arm/mach-omap2/omap_device.c b/arch/arm/mach-omap2/omap_device.c
index 0d7b065..2cf12c1 100644
--- a/arch/arm/mach-omap2/omap_device.c
+++ b/arch/arm/mach-omap2/omap_device.c
@@ -329,8 +329,8 @@ static int omap_device_build_from_dt(struct platform_device *pdev)
 	struct omap_device *od;
 	struct omap_hwmod *oh;
 	struct device_node *node = pdev->dev.of_node;
-	const char *oh_name;
-	int oh_cnt, i, ret = 0;
+	const char *oh_name, *rst_name;
+	int oh_cnt, dstr_cnt, i, ret = 0;
 
 	oh_cnt = of_property_count_strings(node, "ti,hwmods");
 	if (!oh_cnt || IS_ERR_VALUE(oh_cnt)) {
@@ -375,6 +375,27 @@ static int omap_device_build_from_dt(struct platform_device *pdev)
 	if (of_get_property(node, "ti,no_idle_on_suspend", NULL))
 		omap_device_disable_idle_on_suspend(pdev);
 
+	dstr_cnt =
+		of_property_count_strings(node, "ti,deassert-hard-reset");
+	if (dstr_cnt > 0) {
+		for (i = 0; i < dstr_cnt; i += 2) {
+			of_property_read_string_index(
+				node, "ti,deassert-hard-reset", i,
+				&oh_name);
+			of_property_read_string_index(
+				node, "ti,deassert-hard-reset", i+1,
+				&rst_name);
+			oh = omap_hwmod_lookup(oh_name);
+			if (!oh) {
+				dev_warn(&pdev->dev,
+				"Cannot parse deassert property for '%s'\n",
+				oh_name);
+				break;
+			}
+			omap_hwmod_deassert_hardreset(oh, rst_name);
+		}
+	}
+
 	pdev->dev.pm_domain = &omap_device_pm_domain;
 
 odbfd_exit1:
diff --git a/drivers/uio/uio_pruss.c b/drivers/uio/uio_pruss.c
index 2bb1d7a..563a337 100644
--- a/drivers/uio/uio_pruss.c
+++ b/drivers/uio/uio_pruss.c
@@ -187,7 +187,7 @@ static int pruss_probe(struct platform_device *dev)
 		goto out_free;
 	}
 
-	if (pdata->sram_pool) {
+	if (pdata && pdata->sram_pool) {
 		gdev->sram_pool = pdata->sram_pool;
 #ifdef CONFIG_ARCH_DAVINCI_DA850
 		gdev->sram_vaddr =
-- 
1.8.1.4

