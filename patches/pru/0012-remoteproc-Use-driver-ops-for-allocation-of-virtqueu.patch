From aef06d00fe9f541f03e759f108c64a9066831354 Mon Sep 17 00:00:00 2001
From: Pantelis Antoniou <panto@antoniou-consulting.com>
Date: Fri, 24 May 2013 15:01:19 +0300
Subject: [PATCH 12/19] remoteproc: Use driver ops for allocation of virtqueus

Virtqueues can not always be dynamically allocated.
In many cases they should be placed in driver controlled areas.

Signed-off-by: Pantelis Antoniou <panto@antoniou-consulting.com>
---
 drivers/remoteproc/remoteproc_core.c | 64 ++++++++++++++++++++++++++++--------
 include/linux/remoteproc.h           |  9 +++++
 2 files changed, 59 insertions(+), 14 deletions(-)

diff --git a/drivers/remoteproc/remoteproc_core.c b/drivers/remoteproc/remoteproc_core.c
index 752b507..7c56d0a 100644
--- a/drivers/remoteproc/remoteproc_core.c
+++ b/drivers/remoteproc/remoteproc_core.c
@@ -187,31 +187,59 @@ void *rproc_da_to_va(struct rproc *rproc, u64 da, int len)
 }
 EXPORT_SYMBOL(rproc_da_to_va);
 
+static inline void *rproc_alloc_vring_internal(struct rproc *rproc,
+		const struct fw_rsc_vdev_vring *vring,
+		int size, dma_addr_t *dma)
+{
+	struct device *dev = &rproc->dev;
+
+	/* Custom vring allocator */
+	if (rproc->ops->alloc_vring != NULL)
+		return rproc->ops->alloc_vring(rproc, vring, size, dma);
+
+	/*
+	 * Allocate non-cacheable memory for the vring. In the future
+	 * this call will also configure the IOMMU for us
+	 * TODO: let the rproc know the da of this vring
+	 */
+	return dma_alloc_coherent(dev->parent, PAGE_ALIGN(size),
+			dma, GFP_KERNEL);
+}
+
+static inline void rproc_free_vring_internal(struct rproc *rproc,
+		const struct fw_rsc_vdev_vring *vring,
+		int size, void *va, dma_addr_t dma)
+{
+	struct device *dev = &rproc->dev;
+
+	/* Custom vring allocator */
+	if (rproc->ops->free_vring != NULL)
+		rproc->ops->free_vring(rproc, vring, size, va, dma);
+	else
+		dma_free_coherent(dev->parent,
+			PAGE_ALIGN(size), va, dma);
+}
+
 int rproc_alloc_vring(struct rproc_vdev *rvdev, int i)
 {
 	struct rproc *rproc = rvdev->rproc;
 	struct device *dev = &rproc->dev;
 	struct rproc_vring *rvring = &rvdev->vring[i];
+	struct fw_rsc_vdev_vring *vring = rvring->rsc_vring;
 	dma_addr_t dma;
 	void *va;
 	int ret, size, notifyid;
 
-	/* actual size of vring (in bytes) */
-	size = PAGE_ALIGN(vring_size(rvring->len, rvring->align));
-
 	if (!idr_pre_get(&rproc->notifyids, GFP_KERNEL)) {
 		dev_err(dev, "idr_pre_get failed\n");
 		return -ENOMEM;
 	}
 
-	/*
-	 * Allocate non-cacheable memory for the vring. In the future
-	 * this call will also configure the IOMMU for us
-	 * TODO: let the rproc know the da of this vring
-	 */
-	va = dma_alloc_coherent(dev->parent, size, &dma, GFP_KERNEL);
+	size = vring_size(rvring->len, rvring->align);
+
+	va = rproc_alloc_vring_internal(rproc, vring, size, &dma);
 	if (!va) {
-		dev_err(dev->parent, "dma_alloc_coherent failed\n");
+		dev_err(dev->parent, "rproc alloc of vring #%d failed\n", i);
 		return -EINVAL;
 	}
 
@@ -224,7 +252,7 @@ int rproc_alloc_vring(struct rproc_vdev *rvdev, int i)
 	ret = idr_get_new(&rproc->notifyids, rvring, &notifyid);
 	if (ret) {
 		dev_err(dev, "idr_get_new failed: %d\n", ret);
-		dma_free_coherent(dev->parent, size, va, dma);
+		rproc_free_vring_internal(rproc, vring, size, va, dma);
 		return ret;
 	}
 
@@ -269,6 +297,9 @@ rproc_parse_vring(struct rproc_vdev *rvdev, struct fw_rsc_vdev *rsc, int i)
 	rvring->align = vring->align;
 	rvring->rvdev = rvdev;
 
+	/* point to the resource */
+	rvring->rsc_vring = vring;
+
 	return 0;
 }
 
@@ -281,11 +312,13 @@ static int rproc_max_notifyid(int id, void *p, void *data)
 
 void rproc_free_vring(struct rproc_vring *rvring)
 {
-	int size = PAGE_ALIGN(vring_size(rvring->len, rvring->align));
-	struct rproc *rproc = rvring->rvdev->rproc;
+	int size = vring_size(rvring->len, rvring->align);
+	struct rproc_vdev *rvdev = rvring->rvdev;
+	struct rproc *rproc = rvdev->rproc;
 	int maxid = 0;
 
-	dma_free_coherent(rproc->dev.parent, size, rvring->va, rvring->dma);
+	rproc_free_vring_internal(rproc, rvring->rsc_vring,
+			size, rvring->va, rvring->dma);
 	idr_remove(&rproc->notifyids, rvring->notifyid);
 
 	/* Find the largest remaining notifyid */
@@ -355,6 +388,9 @@ static int rproc_handle_vdev(struct rproc *rproc, struct fw_rsc_vdev *rsc,
 
 	rvdev->rproc = rproc;
 
+	/* point to the resource */
+	rvdev->rsc_vdev = rsc;
+
 	/* parse the vrings */
 	for (i = 0; i < rsc->num_of_vrings; i++) {
 		ret = rproc_parse_vring(rvdev, rsc, i);
diff --git a/include/linux/remoteproc.h b/include/linux/remoteproc.h
index faf3332..c8573fd 100644
--- a/include/linux/remoteproc.h
+++ b/include/linux/remoteproc.h
@@ -335,6 +335,13 @@ struct rproc_ops {
 	int (*start)(struct rproc *rproc);
 	int (*stop)(struct rproc *rproc);
 	void (*kick)(struct rproc *rproc, int vqid);
+
+	void *(*alloc_vring)(struct rproc *rproc,
+		const struct fw_rsc_vdev_vring *vring,
+		int size, dma_addr_t *dma);
+	void (*free_vring)(struct rproc *rproc,
+		const struct fw_rsc_vdev_vring *vring,
+		int size, void *va, dma_addr_t dma);
 };
 
 /**
@@ -454,6 +461,7 @@ struct rproc_vring {
 	int notifyid;
 	struct rproc_vdev *rvdev;
 	struct virtqueue *vq;
+	struct fw_rsc_vdev_vring *rsc_vring;
 };
 
 /**
@@ -472,6 +480,7 @@ struct rproc_vdev {
 	struct rproc_vring vring[RVDEV_NUM_VRINGS];
 	unsigned long dfeatures;
 	unsigned long gfeatures;
+	struct fw_rsc_vdev *rsc_vdev;
 };
 
 struct rproc *rproc_alloc(struct device *dev, const char *name,
-- 
1.9.0

