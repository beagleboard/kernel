From f84c6f152cc5f208d34f42149ac8a62641acfbd4 Mon Sep 17 00:00:00 2001
From: Pantelis Antoniou <panto@antoniou-consulting.com>
Date: Wed, 24 Jul 2013 18:30:43 +0300
Subject: [PATCH 08/40] capemgr: Priority on capemgr.enable_partno option

When booting from a device that's providing the rootfs via a
cape fragment, you face the following problem as it appears
on the beaglebone black.

The priority of the emmc cape is low (positive number) so that
any cape that is detected and uses the resources of the emmc
interface can work (for example the camera cape). This means that
we have to be booting from external sd card.

However if there is no conflict, and the cape dtbo is not included
in the kernel (via the firmware builtin configure option) the capemgr
will attempt to load the cape too early, at a time that the rootfs
cape hasn't been loaded yet.

In order to fix that an optional third parameter is added to
the specification of a cape in the eanble_partno option which allow
you to specify the priority.

so capemgr.enable_partno=[PART[:REV[:PRIO]]][,PART..]

To load the cape fragment after all the builtin capes have loaded
use a priority higher than 10; i.e. to load cape foo use:

capemgr.enable_partno=foo:00A0:10

Signed-off-by: Pantelis Antoniou <panto@antoniou-consulting.com>
---
 drivers/misc/cape/beaglebone/capemgr.c | 44 +++++++++++++++++++++++-----------
 1 file changed, 30 insertions(+), 14 deletions(-)

diff --git a/drivers/misc/cape/beaglebone/capemgr.c b/drivers/misc/cape/beaglebone/capemgr.c
index b2d5edb..0f6673a 100644
--- a/drivers/misc/cape/beaglebone/capemgr.c
+++ b/drivers/misc/cape/beaglebone/capemgr.c
@@ -178,7 +178,7 @@ static int bone_slot_fill_override(struct bone_cape_slot *slot,
 		const char *part_number, const char *version);
 static struct bone_cape_slot *bone_capemgr_add_slot(
 		struct bone_capemgr_info *info, struct device_node *node,
-		const char *part_number, const char *version);
+		const char *part_number, const char *version, int prio);
 static int bone_capemgr_remove_slot_no_lock(struct bone_cape_slot *slot);
 static int bone_capemgr_remove_slot(struct bone_cape_slot *slot);
 static int bone_capemgr_load(struct bone_cape_slot *slot);
@@ -1086,7 +1086,7 @@ found:
 			}
 
 			slot = bone_capemgr_add_slot(info, node,
-					part_number, version);
+					part_number, version, 0);
 			if (IS_ERR(slot)) {
 				dev_err(&pdev->dev, "Failed to add slot #%d\n",
 					atomic_read(&info->next_slot_nr) - 1);
@@ -1104,7 +1104,7 @@ found:
 	/* no specific slot found, try immediate */
 	if (!slot)
 		slot = bone_capemgr_add_slot(info, NULL,
-				part_number, version);
+				part_number, version, 0);
 
 	if (IS_ERR_OR_NULL(slot)) {
 		dev_err(&pdev->dev, "Failed to add slot #%d\n",
@@ -1618,7 +1618,7 @@ static int bone_slot_fill_override(struct bone_cape_slot *slot,
 
 static struct bone_cape_slot *
 bone_capemgr_add_slot(struct bone_capemgr_info *info, struct device_node *node,
-		const char *part_number, const char *version)
+		const char *part_number, const char *version, int prio)
 {
 	struct device_node *eeprom_node;
 	struct bone_cape_slot *slot;
@@ -1637,6 +1637,7 @@ bone_capemgr_add_slot(struct bone_capemgr_info *info, struct device_node *node,
 	}
 	slot->info = info;
 	slot->slotno = slotno;
+	slot->priority = prio;
 
 	if (node && !of_property_read_bool(node, "ti,cape-override")) {
 		ret = of_property_read_u32(node, "eeprom",
@@ -1894,7 +1895,8 @@ bone_capemgr_probe(struct platform_device *pdev)
 	const char *board_name;
 	const char *compatible_name;
 	struct bone_capemap *capemap;
-	int ret, len;
+	int ret, len, prio;
+	long val;
 	char *wbuf, *s, *p, *e;
 
 	/* we don't use platform_data at all; we require OF */
@@ -2063,7 +2065,7 @@ bone_capemgr_probe(struct platform_device *pdev)
 				continue;
 
 			slot = bone_capemgr_add_slot(info, node,
-					NULL, NULL);
+					NULL, NULL, 0);
 			if (IS_ERR(slot)) {
 				dev_err(&pdev->dev, "Failed to add slot #%d\n",
 					atomic_read(&info->next_slot_nr));
@@ -2090,7 +2092,7 @@ bone_capemgr_probe(struct platform_device *pdev)
 		/* add any enable_partno capes */
 		s = enable_partno;
 		while (*s) {
-			/* form is PART[:REV],PART.. */
+			/* form is PART[:REV[:PRIO]],PART.. */
 			p = strchr(s, ',');
 			if (p == NULL)
 				e = s + strlen(s);
@@ -2107,20 +2109,34 @@ bone_capemgr_probe(struct platform_device *pdev)
 			/* move to the next */
 			s = *e ? e + 1 : e;
 
-			/* now split the rev part */
+			part_number = wbuf;
+
+			/* default version is NULL & prio is 0 */
+			version = NULL;
+			prio = 0;
+
+			/* now split the rev & prio part */
 			p = strchr(wbuf, ':');
-			if (p != NULL)
+			if (p != NULL) {
 				*p++ = '\0';
+				if (*p != ':')
+					version = p;
+				p = strchr(p, ':');
+				if (p != NULL) {
+					*p++ = '\0';
+					ret = kstrtol(p, 10, &val);
+					if (ret == 0)
+						prio = val;
+				}
+			}
 
-			part_number = wbuf;
-			version = p;
 
-			dev_info(&pdev->dev, "enabled_partno part_number '%s', version '%s'\n",
-					part_number, version ? version : "N/A");
+			dev_info(&pdev->dev, "enabled_partno part_number '%s', version '%s', prio '%d'\n",
+					part_number, version ? version : "N/A", prio);
 
 			/* only immediate slots are allowed here */
 			slot = bone_capemgr_add_slot(info, NULL,
-					part_number, version);
+					part_number, version, prio);
 
 			/* we continue even in case of an error */
 			if (IS_ERR_OR_NULL(slot)) {
-- 
1.9.0

