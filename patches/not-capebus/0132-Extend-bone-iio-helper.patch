From 7ccf68ccd55d171527f87f18f3db46cd35ee9b03 Mon Sep 17 00:00:00 2001
From: Pantelis Antoniou <panto@antoniou-consulting.com>
Date: Thu, 21 Mar 2013 14:32:03 +0200
Subject: [PATCH 132/177] Extend bone-iio helper

Allow multiple ADC entries.
DT bindinds are extended so you can do:

vsense-name = "AIN1", "AIN3";
vsense-scale = <100 100>;

Signed-off-by: Pantelis Antoniou <panto@antoniou-consulting.com>
---
 drivers/misc/cape/beaglebone/bone-iio-helper.c | 152 ++++++++++++++++++-------
 1 file changed, 110 insertions(+), 42 deletions(-)

diff --git a/drivers/misc/cape/beaglebone/bone-iio-helper.c b/drivers/misc/cape/beaglebone/bone-iio-helper.c
index d2c76e1..a919857 100644
--- a/drivers/misc/cape/beaglebone/bone-iio-helper.c
+++ b/drivers/misc/cape/beaglebone/bone-iio-helper.c
@@ -45,44 +45,51 @@ static const struct of_device_id bone_iio_helper_of_match[] = {
 };
 MODULE_DEVICE_TABLE(of, bone_iio_helper_of_match);
 
-struct iio_helper_info {
-	struct platform_device *pdev;
+struct iio_helper_info;
+
+struct iio_helper_chan {
+	struct iio_helper_info *info;
+	int index;
 	const char *vsense_name;
 	unsigned int vsense_scale;
 	struct iio_channel *vsense_channel;
+	struct device_attribute attr;
+	unsigned int attr_created : 1;
+};
+
+#define iio_helper_attr_to_chan(attr) \
+	container_of((attr), struct iio_helper_chan, attr)
+
+struct iio_helper_info {
+	struct platform_device *pdev;
+	int channel_count;
+	struct iio_helper_chan *channel;
+	u32 *scale;
 };
 
 static ssize_t iio_helper_show_mvolts(struct device *dev,
 		struct device_attribute *attr, char *buf)
 {
-	struct platform_device *pdev = to_platform_device(dev);
-	struct iio_helper_info *info = platform_get_drvdata(pdev);
+	struct iio_helper_chan *chan = iio_helper_attr_to_chan(attr);
 	int ret, val;
 	u32 mvolts;
 
-	ret = iio_read_channel_raw(info->vsense_channel, &val);
+	ret = iio_read_channel_raw(chan->vsense_channel, &val);
 	if (ret < 0)
 		return ret;
 
 	/* volts = ((1800 / 4096) * val * scale) = (1.8 * val * scale /4096) */
-	mvolts = div_u64(1800 * info->vsense_scale * (u64)val, 4096 * 100);
+	mvolts = div_u64(1800 * chan->vsense_scale * (u64)val, 4096 * 100);
 
 	return sprintf(buf, "%d\n", mvolts);
 }
 
-static DEVICE_ATTR(mvolts, S_IRUGO,
-		iio_helper_show_mvolts, NULL);
-
-static int iio_helper_sysfs_register(struct platform_device *pdev)
-{
-	return device_create_file(&pdev->dev, &dev_attr_mvolts);
-}
-
 static int bone_iio_helper_probe(struct platform_device *pdev)
 {
 	struct iio_helper_info *info;
+	struct iio_helper_chan *chan;
 	struct device_node *pnode = pdev->dev.of_node;
-	int err;
+	int i, err;
 
 	/* we only support OF */
 	if (pnode == NULL) {
@@ -99,46 +106,101 @@ static int bone_iio_helper_probe(struct platform_device *pdev)
 	platform_set_drvdata(pdev, info);
 	info->pdev = pdev;
 
-	if (of_property_read_string(pnode, "vsense-name", &info->vsense_name) != 0) {
-		dev_err(&pdev->dev, "Could not read vsense-name property.");
-		err = -EINVAL;
+	err = of_property_count_strings(pnode, "vsense-name");
+	if (err < 0) {
+		dev_err(&pdev->dev, "Failed on vsense-name string property\n");
 		goto err_no_vsense;
 	}
-
-	if (of_property_read_u32(pnode, "vsense-scale", &info->vsense_scale) != 0) {
-		dev_err(&pdev->dev, "Could not read vsense-scale property");
+	if (err == 0) {
+		dev_err(&pdev->dev, "vsense-name property is empty\n");
 		err = -EINVAL;
 		goto err_no_vsense;
 	}
-
-	if (info->vsense_scale == 0) {
-		dev_err(&pdev->dev, "Invalid vsense-scale property");
-		err = -EINVAL;
-		goto err_no_vsense;
+	info->channel_count = err;
+	info->channel = devm_kzalloc(&pdev->dev,
+		info->channel_count * sizeof(*info->channel), GFP_KERNEL);
+	if (info->channel == NULL) {
+		dev_err(&pdev->dev, "Failed to allocate channel array\n");
+		err = -ENOMEM;
+		goto err_no_chan;
 	}
 
-	info->vsense_channel = iio_channel_get(NULL, info->vsense_name);
-	if (IS_ERR(info->vsense_channel)) {
-		dev_err(&pdev->dev, "Could not get %s analog input\n",
-					info->vsense_name);
-		err = PTR_ERR(info->vsense_channel);
-		goto err_no_vsense;
+	info->scale = devm_kzalloc(&pdev->dev,
+		info->channel_count * sizeof(*info->scale), GFP_KERNEL);
+	if (info->scale == NULL) {
+		dev_err(&pdev->dev, "Failed to allocate scale array\n");
+		err = -ENOMEM;
+		goto err_no_scale;
 	}
 
-	err = iio_helper_sysfs_register(pdev);
+	err = of_property_read_u32_array(pnode, "vsense-scale", info->scale,
+			info->channel_count);
 	if (err != 0) {
-		dev_err(&pdev->dev, "unable to register sysfs\n");
-		goto err_no_sysfs;
+		dev_err(&pdev->dev, "Failed to read vsense-scale array\n");
+		goto err_bad_scale;
+	}
+
+	for (i = 0; i < info->channel_count; i++) {
+
+		chan = &info->channel[i];
+
+		err = of_property_read_string_index(pnode, "vsense-name", i,
+				&chan->vsense_name);
+		if (err != 0) {
+			dev_err(&pdev->dev, "Error on vsense-name #%d\n", i);
+			goto err_bad_chan;
+		}
+
+		chan->vsense_scale = info->scale[i];
+		if (chan->vsense_scale == 0) {
+			dev_err(&pdev->dev, "vsense-sense #%d zero\n", i);
+			err = -EINVAL;
+			goto err_bad_chan;
+		}
+
+		chan->vsense_channel = iio_channel_get(NULL, chan->vsense_name);
+		if (IS_ERR(chan->vsense_channel)) {
+			dev_err(&pdev->dev, "Could not get %s analog input\n",
+						chan->vsense_name);
+			err = PTR_ERR(chan->vsense_channel);
+			chan->vsense_channel = NULL;
+			goto err_bad_chan;
+		}
+
+		chan->attr.attr.name = chan->vsense_name;
+		chan->attr.attr.mode = S_IRUGO;
+		chan->attr.show = iio_helper_show_mvolts;
+		chan->attr.store = NULL;
+
+		err = device_create_file(&pdev->dev, &chan->attr);
+		if (err != 0) {
+			dev_err(&pdev->dev, "Could not create %s attr\n",
+						chan->vsense_name);
+			goto err_bad_chan;
+		}
+		chan->attr_created = 1;
 	}
 
 	dev_info(&pdev->dev, "ready\n");
 
 	return 0;
-
-err_no_sysfs:
-	/* fall-through */
+err_bad_chan:
+	/* cleanup possible channels allocated */
+	for (i = info->channel_count - 1; i >= 0; i--) {
+		chan = &info->channel[i];
+		if (chan->attr_created)
+			device_remove_file(&pdev->dev, &chan->attr);
+		if (chan->vsense_channel != NULL)
+			iio_channel_release(chan->vsense_channel);
+	}
+err_bad_scale:
+	/* nothing */
+err_no_scale:
+	/* nothing */
 err_no_vsense:
-	kfree(info);
+	/* nothing */
+err_no_chan:
+	/* nothing */
 err_no_mem:
 	return err;
 }
@@ -148,10 +210,16 @@ static int bone_iio_helper_remove(struct platform_device *pdev)
 {
 	struct iio_helper_info *info = platform_get_drvdata(pdev);
 	struct device *dev = &pdev->dev;
+	struct iio_helper_chan *chan;
+	int i;
 
-	iio_channel_release(info->vsense_channel);
-	device_remove_file(dev, &dev_attr_mvolts);
-	kfree(info->vsense_name);
+	for (i = info->channel_count - 1; i >= 0; i--) {
+		chan = &info->channel[i];
+		device_remove_file(&pdev->dev, &chan->attr);
+		iio_channel_release(chan->vsense_channel);
+	}
+	devm_kfree(dev, info->scale);
+	devm_kfree(dev, info->channel);
 	devm_kfree(dev, info);
 
 	return 0;
-- 
1.8.1.4

