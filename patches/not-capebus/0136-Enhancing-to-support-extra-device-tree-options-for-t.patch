From dd9921f7c5c718bb7c1a5f85913e1e98bda52f38 Mon Sep 17 00:00:00 2001
From: Darren Etheridge <detheridge@ti.com>
Date: Thu, 21 Mar 2013 16:23:03 -0500
Subject: [PATCH 136/177] Enhancing to support extra device tree options for
 tilcdc: ti,max_width (maximum width in pixels) ti,max_pixelclock (maximum
 allowable pixel clock for the device) also added some extra debugging enabled
 with drm debug to help understand why modes are being selected or rejected.

---
 drivers/gpu/drm/tilcdc/tilcdc_crtc.c | 36 +++++++++++++++++++++++++++++++-----
 drivers/gpu/drm/tilcdc/tilcdc_drv.c  | 18 +++++++++++++++++-
 drivers/gpu/drm/tilcdc/tilcdc_drv.h  | 14 ++++++++++++++
 3 files changed, 62 insertions(+), 6 deletions(-)

diff --git a/drivers/gpu/drm/tilcdc/tilcdc_crtc.c b/drivers/gpu/drm/tilcdc/tilcdc_crtc.c
index 4d94daa..63aec17 100644
--- a/drivers/gpu/drm/tilcdc/tilcdc_crtc.c
+++ b/drivers/gpu/drm/tilcdc/tilcdc_crtc.c
@@ -421,12 +421,15 @@ int tilcdc_crtc_max_width(struct drm_crtc *crtc)
 int tilcdc_crtc_mode_valid(struct drm_crtc *crtc, struct drm_display_mode *mode,
 		int rb_check)
 {
-	struct tilcdc_drm_private *priv = crtc->dev->dev_private;
+  	struct tilcdc_drm_private *priv = crtc->dev->dev_private;
 	unsigned int bandwidth;
+
 	int rb;
 
-	if (mode->hdisplay > tilcdc_crtc_max_width(crtc))
+	/* check to see if the width is within the range that the LCD Controller physically supports */
+	if (mode->hdisplay > tilcdc_crtc_max_width(crtc)) {
 		return MODE_VIRTUAL_X;
+	}
 
 	/* width must be multiple of 16 */
 	if (mode->hdisplay & 0xf)
@@ -435,10 +438,31 @@ int tilcdc_crtc_mode_valid(struct drm_crtc *crtc, struct drm_display_mode *mode,
 	if (mode->vdisplay > 2048)
 		return MODE_VIRTUAL_Y;
 
+
+	DBG("Processing mode %dx%d@%d with pixel clock %d", 
+	       mode->hdisplay, mode->vdisplay, drm_mode_vrefresh(mode), mode->clock);
+
+	/* some devices have a maximum allowed pixel clock */
+	/* configured from the DT */
+	if(mode->clock > priv->max_pixelclock) {
+	  DBG("Rejecting mode, pixel clock too high");
+	  return MODE_BAD;
+	}
+
+	/* some devices further limit the max horizontal resolution */
+	/* configured from the DT */
+	if(mode->hdisplay > priv->max_width) {
+	  return MODE_BAD;
+	}
+
 	/* filter out modes that would require too much memory bandwidth: */
+	/* configured from the DT */
 	bandwidth = mode->hdisplay * mode->vdisplay * drm_mode_vrefresh(mode);
-	if (bandwidth > priv->max_bandwidth)
-		return MODE_BAD;
+	if (bandwidth > priv->max_bandwidth) {
+	  DBG("Rejecting mode, exceeds defined bandwidth limit");
+	  return MODE_BAD;
+	}
+
 
 	if (rb_check) {
 		/* we only support reduced blanking modes */
@@ -446,8 +470,10 @@ int tilcdc_crtc_mode_valid(struct drm_crtc *crtc, struct drm_display_mode *mode,
 		       (mode->hsync_end - mode->hdisplay == 80) &&
 		       (mode->hsync_end - mode->hsync_start == 32) &&
 		       (mode->vsync_start - mode->vdisplay == 3);
-		if (!rb)
+		if (!rb) {
+			DBG("Throwing away because we only support reduced blanking");
 			return MODE_BAD;
+		}
 	}
 
 	return MODE_OK;
diff --git a/drivers/gpu/drm/tilcdc/tilcdc_drv.c b/drivers/gpu/drm/tilcdc/tilcdc_drv.c
index 0fe14ea..fca4f16 100644
--- a/drivers/gpu/drm/tilcdc/tilcdc_drv.c
+++ b/drivers/gpu/drm/tilcdc/tilcdc_drv.c
@@ -236,11 +236,27 @@ static int tilcdc_load(struct drm_device *dev, unsigned long flags)
 #endif
 
 	if (of_property_read_u32(node, "ti,max-bandwidth", &priv->max_bandwidth))
-		priv->max_bandwidth = 1280 * 1024 * 60;
+		priv->max_bandwidth = TILCDC_DEFAULT_MAX_BANDWIDTH;
+
+	DBG("Maximum Bandwidth Value %d", priv->max_bandwidth);
+
+	if (of_property_read_u32(node, "ti,max-width", &priv->max_width))
+		priv->max_width = TILCDC_DEFAULT_MAX_WIDTH;
+
+	DBG("Maximum Horizontal Pixel Width Value %dpixels", priv->max_width);
+
+	if (of_property_read_u32(node, "ti,max-pixelclock", &priv->max_pixelclock))
+		priv->max_pixelclock = TILCDC_DEFAULT_MAX_PIXELCLOCK;
+
+	DBG("Maximum Pixel Clock Value %dKHz", priv->max_pixelclock);
+
 
 	priv->allow_non_rblank = of_property_read_bool(node,
 			"ti,allow-non-reduced-blanking-modes");
 
+
+	DBG("Allowing Standard Monitor Modes: %s", priv->allow_non_rblank?"true":"false");
+
 	pm_runtime_enable(dev->dev);
 
 	/* Determine LCD IP Version */
diff --git a/drivers/gpu/drm/tilcdc/tilcdc_drv.h b/drivers/gpu/drm/tilcdc/tilcdc_drv.h
index b04f94c..48d744c 100644
--- a/drivers/gpu/drm/tilcdc/tilcdc_drv.h
+++ b/drivers/gpu/drm/tilcdc/tilcdc_drv.h
@@ -34,6 +34,13 @@
 #include <drm/drm_gem_cma_helper.h>
 #include <drm/drm_fb_cma_helper.h>
 
+/* Defaulting to pixel clock defined on AM335x */
+#define TILCDC_DEFAULT_MAX_PIXELCLOCK  126000
+/* Defaulting to max width as defined on AM335x */
+#define TILCDC_DEFAULT_MAX_WIDTH  1366
+/* This may need some tweaking, but want to allow at least 1280x1024@60 */
+#define TILCDC_DEFAULT_MAX_BANDWIDTH  (1366*1024*60)
+
 struct tilcdc_drm_private {
 	void __iomem *mmio;
 
@@ -43,6 +50,13 @@ struct tilcdc_drm_private {
 
 	/* don't attempt resolutions w/ higher W * H * Hz: */
 	uint32_t max_bandwidth;
+	/* Pixel Clock will be restricted to some value as defined in the device datasheet */
+	/* measured in KHz */
+	uint32_t max_pixelclock;
+	/* Max allowable width is limited on a per device basis */
+	/* measured in pixels */
+	uint32_t max_width;
+
 	int allow_non_rblank;	/* ATM we don't support non reduced blank modes */
 
 	/* register contents saved across suspend/resume: */
-- 
1.8.1.4

