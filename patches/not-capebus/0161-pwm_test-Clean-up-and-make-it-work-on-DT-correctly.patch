From 6d265cf1b21ba8e12a0236c71a6a10cac6c748ee Mon Sep 17 00:00:00 2001
From: Pantelis Antoniou <panto@antoniou-consulting.com>
Date: Tue, 9 Apr 2013 22:14:29 +0300
Subject: [PATCH 161/177] pwm_test: Clean-up and make it work on DT correctly

Clean up and DTify the pwm_test driver into something that's reasonably
useful.
Based on work done by Elias & Jack Mitchel.

Signed-off-by: Pantelis Antoniou <panto@antoniou-consulting.com>
---
 drivers/pwm/pwm_test.c | 312 ++++++++++++++++++++++++-------------------------
 1 file changed, 155 insertions(+), 157 deletions(-)

diff --git a/drivers/pwm/pwm_test.c b/drivers/pwm/pwm_test.c
index 3da1890..9c07880 100644
--- a/drivers/pwm/pwm_test.c
+++ b/drivers/pwm/pwm_test.c
@@ -26,21 +26,23 @@
 #include <linux/err.h>
 #include <linux/clk.h>
 #include <linux/pm_runtime.h>
+#include <linux/pinctrl/consumer.h>
 
 struct pwm_test {
 	struct pwm_device *pwm;
-	int ret;
 	struct class *pwm_test_class;
-	unsigned long period, duty, run, polarity, config, requested;
-	unsigned long period_s, duty_s, run_s, polarity_s, config_s, requested_s;
-	struct device *dev;
+	int period;
+	int duty;
+	enum pwm_polarity polarity;
+	int run;
 };
 
 static ssize_t pwm_test_show_duty(struct device *dev,
 		struct device_attribute *attr, char *buf)
 {
 	struct pwm_test *pwm_test = dev_get_drvdata(dev);
-	return sprintf(buf, "%lu\n", pwm_test->duty);
+
+	return sprintf(buf, "%d\n", pwm_test->duty);
 }
 
 static ssize_t pwm_test_store_duty(struct device *dev,
@@ -48,10 +50,23 @@ static ssize_t pwm_test_store_duty(struct device *dev,
 {
 	int rc;
 	struct pwm_test *pwm_test = dev_get_drvdata(dev);
+	int duty;
 
-	rc = kstrtoul(buf, 0, &pwm_test->duty_s);
+	rc = kstrtoint(buf, 0, &duty);
 	if (rc)
 		return rc;
+
+	if (duty < 0)
+		return -EINVAL;
+
+	rc = pwm_config(pwm_test->pwm, duty, pwm_test->period);
+	if (rc) {
+		dev_err(dev, "pwm_config() failed\n");
+		return rc;
+	}
+
+	pwm_test->duty = duty;
+
 	return count;
 }
 
@@ -60,7 +75,7 @@ static ssize_t pwm_test_show_period(struct device *dev,
 {
 	struct pwm_test *pwm_test = dev_get_drvdata(dev);
 
-	return sprintf(buf, "%lu\n", pwm_test->period);
+	return sprintf(buf, "%d\n", pwm_test->period);
 }
 
 static ssize_t pwm_test_store_period(struct device *dev,
@@ -68,60 +83,27 @@ static ssize_t pwm_test_store_period(struct device *dev,
 {
 	int rc;
 	struct pwm_test *pwm_test = dev_get_drvdata(dev);
+	int period;
 
-	rc = kstrtoul(buf, 0, &pwm_test->period_s);
+	rc = kstrtoint(buf, 0, &period);
 	if (rc)
 		return rc;
 
-	return count;
-}
+	if (period < 0)
+		return -EINVAL;
 
-static ssize_t pwm_test_show_config(struct device *dev,
-		struct device_attribute *attr, char *buf)
-{
-	struct pwm_test *pwm_test = dev_get_drvdata(dev);
-	if (pwm_test->config)
-		return sprintf(buf, "config Done\n");
-	else
-		return sprintf(buf, "config Failed\n");
-}
-static ssize_t pwm_test_store_config(struct device *dev,
-		struct device_attribute *attr, const char *buf, size_t count)
-{
-	struct pwm_test *pwm_test = dev_get_drvdata(dev);
-	int ret;
-
-  if (pwm_test->pwm == NULL) {
-    pr_err("PWM Device has not been requested\n");
-    return -ENODEV;
-  }
-
-	if (pwm_test->duty_s == 0) {
-		ret = pwm_config(pwm_test->pwm, 0, pwm_test->period_s);
-		if (ret) {
-			pwm_test->config = 0;
-			pr_err("operation failed %d\n", ret);
-			pwm_test->duty_s = pwm_test->duty;
-			pwm_test->period_s = pwm_test->period;
-			return ret;
-		}
-		pwm_test->duty = pwm_test->duty_s;
-		pwm_test->period = pwm_test->period_s;
-		pwm_test->config = 1;
-	} else {
-		ret = pwm_config(pwm_test->pwm, pwm_test->duty_s,
-				pwm_test->period_s);
-		if (ret) {
-			pwm_test->config = 0;
-			pr_err("operation failed %d\n", ret);
-			pwm_test->duty_s = pwm_test->duty;
-			pwm_test->period_s = pwm_test->period;
-			return ret;
-		}
-		pwm_test->duty = pwm_test->duty_s;
-		pwm_test->period = pwm_test->period_s;
-		pwm_test->config = 1;
+	/* same period? just return */
+	if (pwm_test->period == period)
+		return count;
+
+	rc = pwm_config(pwm_test->pwm, pwm_test->duty, period);
+	if (rc) {
+		dev_err(dev, "pwm_config() failed\n");
+		return rc;
 	}
+
+	pwm_test->period = period;
+
 	return count;
 }
 
@@ -129,7 +111,8 @@ static ssize_t pwm_test_show_run(struct device *dev,
 		struct device_attribute *attr, char *buf)
 {
 	struct pwm_test *pwm_test = dev_get_drvdata(dev);
-	return sprintf(buf, "%s\n", pwm_test->run ? "Enabled" : "Disabled");
+
+	return sprintf(buf, "%d\n", pwm_test->run);
 }
 
 static ssize_t pwm_test_store_run(struct device *dev,
@@ -137,23 +120,31 @@ static ssize_t pwm_test_store_run(struct device *dev,
 {
 	int rc;
 	struct pwm_test *pwm_test = dev_get_drvdata(dev);
+	int run;
 
-	rc = kstrtoul(buf, 0, &pwm_test->run_s);
+	rc = kstrtoint(buf, 0, &run);
 	if (rc)
 		return rc;
 
-	if (pwm_test->run_s)
+	/* only 0 & 1 allowed */
+	if (run != 0 && run != 1)
+		return -EINVAL;
+
+	/* same state, don't bother */
+	if (run == pwm_test->run)
+		return count;
+
+	if (run) {
 		rc = pwm_enable(pwm_test->pwm);
-	else
+		if (rc != 0) {
+			dev_err(dev, "pwm_enable failed\n");
+			return rc;
+		}
+	} else
 		pwm_disable(pwm_test->pwm);
 
-	if (rc) {
-		pr_err("operation failed %d\n", rc);
-		pwm_test->run_s = pwm_test->run;
-		return rc;
-	}
+	pwm_test->run = run;
 
-	pwm_test->run = pwm_test->run_s;
 	return count;
 }
 
@@ -161,9 +152,8 @@ static ssize_t pwm_test_show_polarity(struct device *dev,
 		struct device_attribute *attr, char *buf)
 {
 	struct pwm_test *pwm_test = dev_get_drvdata(dev);
-	return sprintf(buf, "%s\n",
-			pwm_test->polarity ? "Polarity Inversed" :
-			"Polarity Normal");
+
+	return sprintf(buf, "%u\n", pwm_test->polarity);
 }
 
 static ssize_t pwm_test_store_polarity(struct device *dev,
@@ -171,84 +161,40 @@ static ssize_t pwm_test_store_polarity(struct device *dev,
 {
 	int rc;
 	struct pwm_test *pwm_test = dev_get_drvdata(dev);
+	int val;
+	enum pwm_polarity polarity;
 
-	rc = kstrtoul(buf, 0, &pwm_test->polarity_s);
+	rc = kstrtoint(buf, 0, &val);
 	if (rc)
 		return rc;
 
-	rc = pwm_set_polarity(pwm_test->pwm, pwm_test->polarity_s);
-	if (rc) {
-		pr_err("operation failed %d\n", rc);
-		return rc;
-	}
+	/* only zero and one allowed */
+	if (val != 0 && val != 1)
+		return -EINVAL;
 
-	pwm_test->polarity = pwm_test->polarity_s;
-	return count;
-}
+	polarity = val ? PWM_POLARITY_INVERSED : PWM_POLARITY_NORMAL;
 
-static ssize_t pwm_test_show_request(struct device *dev,
-		struct device_attribute *attr, char *buf)
-{
-	struct pwm_test *pwm_test = dev_get_drvdata(dev);
-	return sprintf(buf, "%s\n", pwm_test->requested ? "Requested" : "Freed");
-}
+	/* same? don't do anything */
+	if (polarity == pwm_test->polarity)
+		return count;
 
-static ssize_t pwm_test_store_request(struct device *dev,
-		struct device_attribute *attr, const char *buf, size_t count)
-{
-	int rc;
-	struct pwm_test *pwm_test = dev_get_drvdata(dev);
+	/* polarity can only change when we stop the pwm */
+	if (pwm_test->run)
+		pwm_disable(pwm_test->pwm);
 
-	rc = kstrtoul(buf, 0, &pwm_test->requested_s);
-	if (rc)
+	rc = pwm_set_polarity(pwm_test->pwm, polarity);
+	if (rc) {
+		dev_err(dev, "pwm_set_polarity failed\n");
+		if (pwm_test->run)
+			pwm_enable(pwm_test->pwm);
 		return rc;
-
-	if (pwm_test->requested_s) {
-
-    if (pwm_test->pwm) {
-      pr_info("PWM already requested!\n");
-      return count;
-    }
-
-		pwm_test->pwm = pwm_get(dev, NULL);
-
-		if (IS_ERR(pwm_test->pwm)) {
-			dev_err(dev, "%s() %d %ld\n", __func__, __LINE__,
-				PTR_ERR(pwm_test->pwm));
-			rc = -EINVAL;
-		}
-	} else if (pwm_test->pwm != NULL) {
-		
-    pwm_test->polarity = 0;
-		pwm_test->run = 0;
-		pwm_test->duty = 0;
-		pwm_test->period = 0;
-		pwm_test->config = 0;
-		pwm_test->polarity_s = 0;
-		pwm_test->run_s = 0;
-		pwm_test->duty_s = 0;
-		pwm_test->period_s = 0;
-		pwm_test->config_s = 0;
-
-		pwm_config(pwm_test->pwm, pwm_test->duty_s,
-      pwm_test->period_s);
-
-    pwm_disable(pwm_test->pwm);
-     
-		rc = 0;
 	}
-  else {
-    pr_info("PWM was already unrequested\n");
-  }
 
+	if (pwm_test->run)
+		pwm_enable(pwm_test->pwm);
 
-	if (rc) {
-		pr_err("operation failed %d\n", rc);
-		pwm_test->requested_s = pwm_test->requested;
-		return rc;
-	}
+	pwm_test->polarity = polarity;
 
-	pwm_test->requested = pwm_test->requested_s;
 	return count;
 }
 
@@ -256,16 +202,12 @@ static DEVICE_ATTR(duty, S_IRUSR | S_IWUSR, pwm_test_show_duty, pwm_test_store_d
 static DEVICE_ATTR(period, S_IRUSR | S_IWUSR, pwm_test_show_period, pwm_test_store_period);
 static DEVICE_ATTR(polarity, S_IRUSR | S_IWUSR, pwm_test_show_polarity,
 		pwm_test_store_polarity);
-static DEVICE_ATTR(config, S_IRUSR | S_IWUSR , pwm_test_show_config, pwm_test_store_config);
 static DEVICE_ATTR(run, S_IRUSR | S_IWUSR , pwm_test_show_run, pwm_test_store_run);
-static DEVICE_ATTR(request, S_IRUSR | S_IWUSR , pwm_test_show_request, pwm_test_store_request);
 
 static const struct attribute *pwm_attrs[] = {
 	&dev_attr_duty.attr,
 	&dev_attr_period.attr,
-	&dev_attr_config.attr,
 	&dev_attr_run.attr,
-	&dev_attr_request.attr,
 	&dev_attr_polarity.attr,
 	NULL,
 };
@@ -274,30 +216,89 @@ static const struct attribute_group pwm_device_attr_group = {
 	.attrs = (struct attribute **) pwm_attrs,
 };
 
-static int __init pwm_test_class_init(struct device *dev)
-{
-	if (sysfs_create_group(&dev->kobj, &pwm_device_attr_group))
-		return 1;
-	return 0;
-}
-
 static int pwm_test_probe(struct platform_device *pdev)
 {
+	struct device *dev = &pdev->dev;
+	struct device_node *node = dev->of_node;
 	struct pwm_test *pwm_test;
+	struct of_phandle_args args;
+	struct pinctrl *pinctrl;
+	u32 val;
+	int rc;
 
-	pwm_test = devm_kzalloc(&pdev->dev, sizeof(*pwm_test), GFP_KERNEL);
+	if (node == NULL) {
+		dev_err(dev, "Non DT platforms not supported\n");
+		return -EINVAL;
+	}
+
+	pinctrl = devm_pinctrl_get_select_default(&pdev->dev);
+	if (IS_ERR(pinctrl))
+		dev_warn(&pdev->dev, "Unable to select pin group\n");
 
+	pwm_test = devm_kzalloc(&pdev->dev, sizeof(*pwm_test), GFP_KERNEL);
 	if (!pwm_test) {
 		dev_err(&pdev->dev, "memory error\n");
 		return -ENOMEM;
 	}
+	platform_set_drvdata(pdev, pwm_test);
 
-	if (pwm_test_class_init(&pdev->dev)) {
-		dev_err(&pdev->dev, "sysfs creation failed\n");
-		return -EINVAL;
+	/* now do the probe time config */
+	pwm_test->pwm = devm_pwm_get(&pdev->dev, NULL);
+	if (IS_ERR(pwm_test->pwm)) {
+		dev_err(dev, "unable to request PWM\n");
+		return PTR_ERR(pwm_test->pwm);
 	}
-	dev_set_drvdata(&pdev->dev, pwm_test);
-	platform_set_drvdata(pdev, pwm_test);
+
+	rc = of_parse_phandle_with_args(node, "pwms", "#pwm-cells", 0, &args);
+	if (rc != 0) {
+		dev_err(dev, "of_parse_phandle_with_args() failed\n");
+		return rc;
+	}
+
+	/* read the period */
+	pwm_test->period = args.args[1];
+
+	/* should be at least 2, but 3 is possible to store polarity */
+	pwm_test->polarity = PWM_POLARITY_NORMAL;
+	/* PWM_SPEC_POLARITY is (1 << 0) */
+	if (args.args_count >= 3 && (args.args[2] & (1 << 0)) != 0)
+		pwm_test->polarity = PWM_POLARITY_INVERSED;
+
+	/* Determine the duty from the device tree */
+	rc = of_property_read_u32(node, "duty", &val);
+	if (rc != 0)
+		val = 0;	/* default is 0 */
+	pwm_test->duty = val;
+
+	/* polarity is already set */
+	rc = pwm_config(pwm_test->pwm, pwm_test->duty, pwm_test->period);
+	if (rc) {
+		dev_err(dev, "pwm_config() failed\n");
+		return rc;
+	}
+
+	/* Determine running or not from the device tree */
+	rc = of_property_read_u32(node, "enabled", &val);
+	if (rc < 0)
+		val = 0;	/* default is disabled */
+
+	/* single bit */
+	pwm_test->run = !!val;
+
+	if (pwm_test->run) {
+		rc = pwm_enable(pwm_test->pwm);
+		if (rc < 0) {
+			dev_err(dev, "pwm_enable failed\n");
+			return rc;
+		}
+	}
+
+	rc = sysfs_create_group(&dev->kobj, &pwm_device_attr_group);
+	if (rc != 0) {
+		dev_err(dev, "Unable to create sysfs entries\n");
+		return rc;
+	}
+
 	return 0;
 }
 
@@ -305,17 +306,14 @@ static int pwm_test_remove(struct platform_device *pdev)
 {
 	struct pwm_test *pwm_test = platform_get_drvdata(pdev);
 
-	if (!pwm_test->ret) {
+	sysfs_remove_group(&pdev->dev.kobj, &pwm_device_attr_group);
+
+	if (pwm_test->run) {
 		pwm_config(pwm_test->pwm, 0, 0x1000);
 		pwm_disable(pwm_test->pwm);
-		pr_emerg("PWM Device Disabled %s\n", dev_name(&pdev->dev));
 	}
-	if (pwm_test->requested)
-		pwm_free(pwm_test->pwm);
 
-	pr_emerg("PWM Device Freed %s\n", dev_name(&pdev->dev));
-	pwm_test->run = 0;
-	sysfs_remove_group(&pdev->dev.kobj, &pwm_device_attr_group);
+	devm_pwm_put(&pdev->dev, pwm_test->pwm);
 	return 0;
 }
 
-- 
1.8.1.4

