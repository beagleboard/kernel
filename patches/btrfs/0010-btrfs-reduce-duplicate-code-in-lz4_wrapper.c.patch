From c53e88a0a8c33ded82a7449ba66e70a7be1306fd Mon Sep 17 00:00:00 2001
From: Andrew Mahone <andrew.mahone@gmail.com>
Date: Fri, 1 Jun 2012 21:17:18 -0400
Subject: [PATCH 10/11] btrfs: reduce duplicate code in lz4_wrapper.c

Add generic functions for compress_pages and alloc that accept an argument to
enable high compression, and replace the lz4/lz4hc variants of both with
wrappers for these.

Signed-off-by: Andrew Mahone <andrew.mahone@gmail.com>
Signed-off-by: David Sterba <dsterba@suse.cz>
---
 fs/btrfs/lz4_wrapper.c | 220 +++++++++----------------------------------------
 1 file changed, 38 insertions(+), 182 deletions(-)

diff --git a/fs/btrfs/lz4_wrapper.c b/fs/btrfs/lz4_wrapper.c
index b9d3273..919fb10 100644
--- a/fs/btrfs/lz4_wrapper.c
+++ b/fs/btrfs/lz4_wrapper.c
@@ -49,7 +49,7 @@ static void lz4_free_workspace(struct list_head *ws)
 	kfree(workspace);
 }
 
-static struct list_head *lz4_alloc_workspace(void)
+static struct list_head *lz4_alloc_workspace_generic(int hi)
 {
 	struct workspace *workspace;
 
@@ -57,7 +57,10 @@ static struct list_head *lz4_alloc_workspace(void)
 	if (!workspace)
 		return ERR_PTR(-ENOMEM);
 
-	workspace->mem = vmalloc(LZ4_MEM_COMPRESS);
+	if (hi)
+		workspace->mem = vmalloc(LZ4HC_MEM_COMPRESS);
+	else
+		workspace->mem = vmalloc(LZ4_MEM_COMPRESS);
 	workspace->buf = vmalloc(LZ4_MAX_WORKBUF);
 	workspace->cbuf = vmalloc(LZ4_MAX_WORKBUF);
 	if (!workspace->mem || !workspace->buf || !workspace->cbuf)
@@ -71,26 +74,14 @@ fail:
 	return ERR_PTR(-ENOMEM);
 }
 
-static struct list_head *lz4hc_alloc_workspace(void)
+static struct list_head *lz4_alloc_workspace(void)
 {
-	struct workspace *workspace;
-
-	workspace = kzalloc(sizeof(*workspace), GFP_NOFS);
-	if (!workspace)
-		return ERR_PTR(-ENOMEM);
-
-	workspace->mem = vmalloc(LZ4HC_MEM_COMPRESS);
-	workspace->buf = vmalloc(LZ4_MAX_WORKBUF);
-	workspace->cbuf = vmalloc(LZ4_MAX_WORKBUF);
-	if (!workspace->mem || !workspace->buf || !workspace->cbuf)
-		goto fail;
-
-	INIT_LIST_HEAD(&workspace->list);
+	return lz4_alloc_workspace_generic(0);
+}
 
-	return &workspace->list;
-fail:
-	lz4_free_workspace(&workspace->list);
-	return ERR_PTR(-ENOMEM);
+static struct list_head *lz4hc_alloc_workspace(void)
+{
+	return lz4_alloc_workspace_generic(1);
 }
 
 static inline void write_compress_length(char *buf, size_t len)
@@ -109,7 +100,7 @@ static inline size_t read_compress_length(char *buf)
 	return le32_to_cpu(dlen);
 }
 
-static int lz4_compress_pages(struct list_head *ws,
+static int lz4_compress_pages_generic(struct list_head *ws,
 			      struct address_space *mapping,
 			      u64 start, unsigned long len,
 			      struct page **pages,
@@ -117,7 +108,7 @@ static int lz4_compress_pages(struct list_head *ws,
 			      unsigned long *out_pages,
 			      unsigned long *total_in,
 			      unsigned long *total_out,
-			      unsigned long max_out)
+			      unsigned long max_out, int hi)
 {
 	struct workspace *workspace = list_entry(ws, struct workspace, list);
 	int ret = 0;
@@ -163,8 +154,12 @@ static int lz4_compress_pages(struct list_head *ws,
 	/* compress at most one page of data each time */
 	in_len = min(len, PAGE_CACHE_SIZE);
 	while (tot_in < len) {
-		ret = lz4_compress(data_in, in_len, workspace->cbuf, &out_len,
-				workspace->mem);
+		if (hi)
+			ret = lz4hc_compress(data_in, in_len, workspace->cbuf,
+					&out_len, workspace->mem);
+		else
+			ret = lz4_compress(data_in, in_len, workspace->cbuf, &out_len,
+					workspace->mem);
 		if (ret < 0) {
 			printk(KERN_DEBUG
 				"btrfs: lz4 compress in loop returned %d\n",
@@ -277,7 +272,8 @@ out:
 
 	return ret;
 }
-static int lz4hc_compress_pages(struct list_head *ws,
+
+static int lz4_compress_pages(struct list_head *ws,
 			      struct address_space *mapping,
 			      u64 start, unsigned long len,
 			      struct page **pages,
@@ -287,164 +283,24 @@ static int lz4hc_compress_pages(struct list_head *ws,
 			      unsigned long *total_out,
 			      unsigned long max_out)
 {
-	struct workspace *workspace = list_entry(ws, struct workspace, list);
-	int ret = 0;
-	char *data_in;
-	char *cpage_out;
-	int nr_pages = 0;
-	struct page *in_page = NULL;
-	struct page *out_page = NULL;
-	unsigned long bytes_left;
-
-	size_t in_len;
-	size_t out_len;
-	char *buf;
-	unsigned long tot_in = 0;
-	unsigned long tot_out = 0;
-	unsigned long pg_bytes_left;
-	unsigned long out_offset;
-	unsigned long bytes;
-
-	*out_pages = 0;
-	*total_out = 0;
-	*total_in = 0;
-
-	in_page = find_get_page(mapping, start >> PAGE_CACHE_SHIFT);
-	data_in = kmap(in_page);
-
-	/*
-	 * store the size of all chunks of compressed data in
-	 * the first 4 bytes
-	 */
-	out_page = alloc_page(GFP_NOFS | __GFP_HIGHMEM);
-	if (out_page == NULL) {
-		ret = -ENOMEM;
-		goto out;
-	}
-	cpage_out = kmap(out_page);
-	out_offset = LZ4_LEN;
-	tot_out = LZ4_LEN;
-	pages[0] = out_page;
-	nr_pages = 1;
-	pg_bytes_left = PAGE_CACHE_SIZE - LZ4_LEN;
-
-	/* compress at most one page of data each time */
-	in_len = min(len, PAGE_CACHE_SIZE);
-	while (tot_in < len) {
-		out_len = LZ4_CHUNK_SIZE;
-		ret = lz4hc_compress(data_in, in_len, workspace->cbuf,
-				&out_len, workspace->mem);
-		if (ret < 0) {
-			printk(KERN_DEBUG
-				"btrfs: lz4hc compress in loop returned %d\n",
-			       ret);
-			ret = -1;
-			goto out;
-		}
-
-		/* store the size of this chunk of compressed data */
-		write_compress_length(cpage_out + out_offset, out_len);
-		tot_out += LZ4_LEN;
-		out_offset += LZ4_LEN;
-		pg_bytes_left -= LZ4_LEN;
-
-		tot_in += in_len;
-		tot_out += out_len;
-
-		/* copy bytes from the working buffer into the pages */
-		buf = workspace->cbuf;
-		while (out_len) {
-			bytes = min_t(unsigned long, pg_bytes_left, out_len);
-
-			memcpy(cpage_out + out_offset, buf, bytes);
-
-			out_len -= bytes;
-			pg_bytes_left -= bytes;
-			buf += bytes;
-			out_offset += bytes;
-
-			/*
-			 * we need another page for writing out.
-			 *
-			 * Note if there's less than 4 bytes left, we just
-			 * skip to a new page.
-			 */
-			if ((out_len == 0 && pg_bytes_left < LZ4_LEN) ||
-			    pg_bytes_left == 0) {
-				if (pg_bytes_left) {
-					memset(cpage_out + out_offset, 0,
-					       pg_bytes_left);
-					tot_out += pg_bytes_left;
-				}
-
-				/* we're done, don't allocate new page */
-				if (out_len == 0 && tot_in >= len)
-					break;
-
-				kunmap(out_page);
-				if (nr_pages == nr_dest_pages) {
-					out_page = NULL;
-					ret = -1;
-					goto out;
-				}
-
-				out_page = alloc_page(GFP_NOFS | __GFP_HIGHMEM);
-				if (out_page == NULL) {
-					ret = -ENOMEM;
-					goto out;
-				}
-				cpage_out = kmap(out_page);
-				pages[nr_pages++] = out_page;
-
-				pg_bytes_left = PAGE_CACHE_SIZE;
-				out_offset = 0;
-			}
-		}
-
-		/* we're making it bigger, give up */
-		if (tot_in > 8192 && tot_in < tot_out)
-			goto out;
-
-		/* we're all done */
-		if (tot_in >= len)
-			break;
-
-		if (tot_out > max_out)
-			break;
-
-		bytes_left = len - tot_in;
-		kunmap(in_page);
-		page_cache_release(in_page);
-
-		start += PAGE_CACHE_SIZE;
-		in_page = find_get_page(mapping, start >> PAGE_CACHE_SHIFT);
-		data_in = kmap(in_page);
-		in_len = min(bytes_left, PAGE_CACHE_SIZE);
-	}
-
-	if (tot_out > tot_in)
-		goto out;
-
-	/* store the size of all chunks of compressed data */
-	cpage_out = kmap(pages[0]);
-	write_compress_length(cpage_out, tot_out);
-
-	kunmap(pages[0]);
-
-	ret = 0;
-	*total_out = tot_out;
-	*total_in = tot_in;
-out:
-	*out_pages = nr_pages;
-	if (out_page)
-		kunmap(out_page);
-
-	if (in_page) {
-		kunmap(in_page);
-		page_cache_release(in_page);
-	}
+	return lz4_compress_pages_generic(ws, mapping, start, len, pages,
+				nr_dest_pages, out_pages, total_in, total_out,
+				max_out, 0);
+}
 
-	return ret;
+static int lz4hc_compress_pages(struct list_head *ws,
+			      struct address_space *mapping,
+			      u64 start, unsigned long len,
+			      struct page **pages,
+			      unsigned long nr_dest_pages,
+			      unsigned long *out_pages,
+			      unsigned long *total_in,
+			      unsigned long *total_out,
+			      unsigned long max_out)
+{
+	return lz4_compress_pages_generic(ws, mapping, start, len, pages,
+				nr_dest_pages, out_pages, total_in, total_out,
+				max_out, 1);
 }
 
 static int lz4_decompress_biovec(struct list_head *ws,
-- 
1.9.0

